"""Change size to capacity in Room and TenantPreference models

Revision ID: 35171555c3fc
Revises: d3624e576dc1
Create Date: 2025-01-27 16:36:22.185691

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '35171555c3fc'
down_revision = 'd3624e576dc1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new tables with the desired schema
    op.create_table('room_new',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('landlord_id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(100), nullable=False),
        sa.Column('description', sa.Text()),
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('capacity', sa.Integer(), nullable=False),
        sa.Column('location', sa.String(200)),
        sa.Column('amenities', sa.Text()),
        sa.Column('availability', sa.Boolean(), default=True),
        sa.Column('created_at', sa.DateTime()),
        sa.Column('image_urls', sa.Text()),
        sa.Column('safety_score', sa.Float()),
        sa.Column('cleanliness_score', sa.Float()),
        sa.Column('accessibility_score', sa.Float()),
        sa.Column('noise_level', sa.Float()),
        sa.ForeignKeyConstraint(['landlord_id'], ['user.id'])
    )

    # Copy data from old table to new table, converting size to capacity
    op.execute(
        'INSERT INTO room_new (id, landlord_id, title, description, price, capacity, '
        'location, amenities, availability, created_at, image_urls, safety_score, '
        'cleanliness_score, accessibility_score, noise_level) '
        'SELECT id, landlord_id, title, description, price, COALESCE(CAST(size AS INTEGER), 1), '
        'location, amenities, availability, created_at, image_urls, safety_score, '
        'cleanliness_score, accessibility_score, noise_level FROM room'
    )

    # Drop old table and rename new table
    op.drop_table('room')
    op.rename_table('room_new', 'room')

    # Do the same for tenant_preference
    op.create_table('tenant_preference_new',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('tenant_id', sa.Integer(), nullable=False),
        sa.Column('max_price', sa.Float(), nullable=False),
        sa.Column('min_capacity', sa.Integer(), nullable=False),
        sa.Column('preferred_location', sa.String(200), nullable=False),
        sa.Column('required_amenities', sa.Text(), nullable=False),
        sa.Column('safety_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('cleanliness_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('accessibility_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('noise_level_weight', sa.Float(), nullable=False, default=0.25),
        sa.ForeignKeyConstraint(['tenant_id'], ['user.id'])
    )

    # Copy data from old table to new table, converting min_size to min_capacity
    op.execute(
        'INSERT INTO tenant_preference_new (id, tenant_id, max_price, min_capacity, '
        'preferred_location, required_amenities, safety_weight, cleanliness_weight, '
        'accessibility_weight, noise_level_weight) '
        'SELECT id, tenant_id, max_price, COALESCE(CAST(min_size AS INTEGER), 1), '
        'preferred_location, required_amenities, safety_weight, cleanliness_weight, '
        'accessibility_weight, noise_level_weight FROM tenant_preference'
    )

    # Drop old table and rename new table
    op.drop_table('tenant_preference')
    op.rename_table('tenant_preference_new', 'tenant_preference')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new tables with the old schema
    op.create_table('room_new',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('landlord_id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(100), nullable=False),
        sa.Column('description', sa.Text()),
        sa.Column('price', sa.Float(), nullable=False),
        sa.Column('size', sa.Float()),
        sa.Column('location', sa.String(200)),
        sa.Column('amenities', sa.Text()),
        sa.Column('availability', sa.Boolean(), default=True),
        sa.Column('created_at', sa.DateTime()),
        sa.Column('image_urls', sa.Text()),
        sa.Column('safety_score', sa.Float()),
        sa.Column('cleanliness_score', sa.Float()),
        sa.Column('accessibility_score', sa.Float()),
        sa.Column('noise_level', sa.Float()),
        sa.ForeignKeyConstraint(['landlord_id'], ['user.id'])
    )

    # Copy data back, converting capacity to size
    op.execute(
        'INSERT INTO room_new (id, landlord_id, title, description, price, size, '
        'location, amenities, availability, created_at, image_urls, safety_score, '
        'cleanliness_score, accessibility_score, noise_level) '
        'SELECT id, landlord_id, title, description, price, CAST(capacity AS FLOAT), '
        'location, amenities, availability, created_at, image_urls, safety_score, '
        'cleanliness_score, accessibility_score, noise_level FROM room'
    )

    # Drop new table and rename old table
    op.drop_table('room')
    op.rename_table('room_new', 'room')

    # Do the same for tenant_preference
    op.create_table('tenant_preference_new',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('tenant_id', sa.Integer(), nullable=False),
        sa.Column('max_price', sa.Float(), nullable=False),
        sa.Column('min_size', sa.Float(), nullable=False),
        sa.Column('preferred_location', sa.String(200), nullable=False),
        sa.Column('required_amenities', sa.Text(), nullable=False),
        sa.Column('safety_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('cleanliness_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('accessibility_weight', sa.Float(), nullable=False, default=0.25),
        sa.Column('noise_level_weight', sa.Float(), nullable=False, default=0.25),
        sa.ForeignKeyConstraint(['tenant_id'], ['user.id'])
    )

    # Copy data back, converting min_capacity to min_size
    op.execute(
        'INSERT INTO tenant_preference_new (id, tenant_id, max_price, min_size, '
        'preferred_location, required_amenities, safety_weight, cleanliness_weight, '
        'accessibility_weight, noise_level_weight) '
        'SELECT id, tenant_id, max_price, CAST(min_capacity AS FLOAT), '
        'preferred_location, required_amenities, safety_weight, cleanliness_weight, '
        'accessibility_weight, noise_level_weight FROM tenant_preference'
    )

    # Drop new table and rename old table
    op.drop_table('tenant_preference')
    op.rename_table('tenant_preference_new', 'tenant_preference')

    # ### end Alembic commands ###
